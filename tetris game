import pygame
import random

colors = [
  (255, 134, 0),#purple
  (221, 117, 28),#brown
  (147, 201, 15),#green
  (252, 227, 0),#yellow
  (254, 52, 126),#pink
  (42, 210, 201),#turquoise
  (255, 24, 24 )#red
]
class Figure: #each tetrimino is a figure
    x = 0
    y = 0

    figures = [
        [[1, 5, 9, 13], [4, 5, 6, 7]],#I BLOCK
        [[4, 5, 9, 10], [2, 6, 5, 9]],#Z BLOCK
        [[6, 7, 9, 10], [1, 5, 6, 10]],#Z BLOCK(R)
        [[1, 2, 5, 9], [0, 4, 5, 6], [1, 5, 9, 8], [4, 5, 6, 10]],#L BLOCK
        [[1, 2, 6, 10], [5, 6, 7, 9], [2, 6, 10, 11], [3, 5, 6, 7]],#LBLOCK(R)
        [[1, 4, 5, 6], [1, 4, 5, 9], [4, 5, 6, 9], [1, 5, 6, 9]],#T BLOCK
        [[1, 2, 5, 6]],#O BLOCK
    ]

    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.type = random.randint(0, len(self.figures) - 1)
        self.color = random.randint(1, len(colors) - 1)
        self.rotation = 0

    def image(self):
        return self.figures[self.type][self.rotation]

    def rotate(self):
        self.rotation = (self.rotation + 1) % len(self.figures[self.type])


class Tetris:
    level = 1
    score = 0
    state = "start"
    field = []
    height = 0
    width = 0
    x = 20
    y = 90
    zoom = 20 #grid zooming  
    figure = None

    def __init__(self, height, width):
        self.height = height
        self.width = width
        self.field = []
        self.score = 0
        self.fall_frequency = 0.5  #initial fall frequency in seconds(controlling the fall frequency)
        self.last_lines_cleared = 0
        self.message = ""
        self.message_duration = 0
        self.message_frames = 50  # the message will be displayed for 2 seconds
        self.level = 1  # initial level
        self.destroyed_lines = 0 # for displaying on screen
        self.state = "start"
        for i in range(height):
            new_line = []
            for j in range(width):
                new_line.append(0)
            self.field.append(new_line)

    def new_figure(self):
        self.figure = Figure(3, 0)
        self.fall_frequency = max(0.1, self.fall_frequency - 0.009) # Increase fall frequency by 0.05 seconds per level up
        self.last_lines_cleared = 0

    def level_up(self):
        self.level = int(self.score / 2) + 1
        # Update fall frequency when level increases (make the game faster)
        self.fall_frequency = max(0.1, self.fall_frequency - 0.009)
        return self.level, self.fall_frequency

    def intersects(self):
        intersection = False
        for i in range(4):
            for j in range(4):
                if i * 4 + j in self.figure.image():
                    if i + self.figure.y > self.height - 1 or \
                            j + self.figure.x > self.width - 1 or \
                            j + self.figure.x < 0 or \
                            self.field[i + self.figure.y][j + self.figure.x] > 0:
                        intersection = True
        return intersection

    def break_lines(self):
        lines_cleared = 0
        for i in range(1, self.height):
            zeros = 0
            for j in range(self.width):
                if self.field[i][j] == 0:
                    zeros += 1
            if zeros == 0:
                lines_cleared += 1
                for i1 in range(i, 1, -1):
                    for j in range(self.width):
                        self.field[i1][j] = self.field[i1 - 1][j]
        
        self.score += lines_cleared**2
        self.destroyed_lines += lines_cleared  # Update the total destroyed lines count


        # Award bonus points based on the number of lines cleared by the last tetromino
        if lines_cleared == 2:
            self.score += 4  # Double
            self.display.message = "Double!!"
        elif lines_cleared == 3:
            self.score += 6  # Triple
            self.display.message = "Triple!!!"
        elif lines_cleared == 4:
            if self.last_lines_cleared == 4:
                self.score += 8  # back to back Tetris
                self.display.message = "Back-to-Back Tetris!!"
            else:
                self.score += 8  # Tetris
                self.display.message = "Tetris!!"

        self.score += lines_cleared ** 2
        if self.score >=1:
            self.level_up()
        self.last_lines_cleared = lines_cleared
    
    def display_message(self, message):
        self.message = message
        self.message_duration = self.message_frames

    def update(self):
        if self.message_duration > 0:
            self.message_duration -= 1


    def go_space(self):
        while not self.intersects():
            self.figure.y += 1
        self.figure.y -= 1
        self.freeze()

    def go_down(self):
        self.figure.y += 1
        if self.intersects():
            self.figure.y -= 1
            self.freeze()
            
              

    def freeze(self):
        for i in range(4):
            for j in range(4):
                if i * 4 + j in self.figure.image():
                    self.field[i + self.figure.y][j + self.figure.x] = self.figure.color
        self.break_lines()
        self.new_figure()
        if self.intersects(): #checks if the block touches the top of the board.
            self.state = "gameover"

    def go_side(self, dx):
        old_x = self.figure.x
        self.figure.x += dx
        if self.intersects():
            self.figure.x = old_x

    def rotate(self):
        old_rotation = self.figure.rotation
        self.figure.rotate()
        # Check for T-spin
        if self.figure.type == 5:  # Type 5 represents the T-shaped tetromino
            if self.intersects() and self.can_t_spin():
                self.score += 5  # Award points for T-spin
        if self.intersects():
            self.figure.rotation = old_rotation

    def can_t_spin(self):
        # Check if T-spin condition is met (T-shaped tetromino rotates into a hole)
        hole_count = 0
        for i in range(4):
            for j in range(4):
                p = i * 4 + j
                if p in self.figure.image():
                    x, y = j + self.figure.x, i + self.figure.y
                    if self.is_valid_position(x, y + 1) and self.field[y + 1][x] == 0:
                        hole_count += 1
                    if self.is_valid_position(x - 1, y) and self.field[y][x - 1] == 0:
                        hole_count += 1
                    if self.is_valid_position(x + 1, y) and self.field[y][x + 1] == 0:
                        hole_count += 1
        if hole_count >= 3:
            self.display_message("T-spin")
        return hole_count >= 3

    def is_valid_position(self, x, y):
        return 0 <= x < self.width and 0 <= y < self.height
def draw_info_box(screen, font2, level, score,destroyed_lines):
    box_width = 160
    box_height = 100
    box_x = 230
    box_y = 330

    pygame.draw.rect(screen, (255, 255, 255), [box_x, box_y, box_width, box_height], 2)

    level_text = font2.render("Level: " + str(level), True, (85, 255, 225))
    score_text = font2.render("Score: " + str(score), True, (183, 123, 130))
    lines_text = font2.render("Lines Cleared: " + str(destroyed_lines), True, (211,188,141))
    screen.blit(lines_text, [box_x + 10, box_y + 70])    
    screen.blit(level_text, [box_x + 10, box_y + 10])
    screen.blit(score_text, [box_x + 10, box_y + 40])
    
pygame.init()

YELLOW = (255, 177, 0)
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

size = (400, 500)
screen = pygame.display.set_mode(size)

pygame.display.set_caption('Tetris Game')

done = False
clock = pygame.time.Clock()
fps = 25
game = Tetris(20, 10)
counter = 0

pressing_down = False

while not done:
    if game.figure is None:
        game.new_figure()
    counter += 1
    if counter > 100000:
        counter = 0

    if counter % (fps // game.level // 2) == 0 or pressing_down:
        if game.state == "start":
            game.go_down()

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            done = True
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_UP:
                game.rotate()
            if event.key == pygame.K_DOWN:
                pressing_down = True
            if event.key == pygame.K_LEFT:
                game.go_side(-1)
            if event.key == pygame.K_RIGHT:
                game.go_side(1)
            if event.key == pygame.K_SPACE:
                game.go_space()
            if event.key == pygame.K_ESCAPE:
                game._init_(20, 10)

    if event.type == pygame.KEYUP:
            if event.key == pygame.K_DOWN:
                pressing_down = False

    screen.fill(BLACK)

    for i in range(game.height):
        for j in range(game.width):
            pygame.draw.rect(screen, WHITE, [game.x + game.zoom * j, game.y + game.zoom * i, game.zoom, game.zoom], 1)
            if game.field[i][j] > 0:
                pygame.draw.rect(screen, colors[game.field[i][j]],
                                 [game.x + game.zoom * j + 1, game.y + game.zoom * i + 1, game.zoom - 2, game.zoom - 1])

    if game.figure is not None:
        for i in range(4):
            for j in range(4):
                p = i * 4 + j
                if p in game.figure.image():
                    pygame.draw.rect(screen, colors[game.figure.color],
                                     [game.x + game.zoom * (j + game.figure.x) + 1,
                                      game.y + game.zoom * (i + game.figure.y) + 1,
                                      game.zoom - 2, game.zoom - 2])

    font = pygame.font.SysFont('Calibri', 25, True, False)
    font1 = pygame.font.SysFont('Calibri', 50, True, False)
    font2 = pygame.font.SysFont('MS Gothic', 15, True, False)
    
    
    if game.message_duration > 0:
        message_text = font.render(game.message, True,(255,188,217))
        screen.blit(message_text, [180, 150])
    text_game_over = font1.render("Game Over", True, (187,0,0))
    text_game_over1 = font.render("Press ESC", True, (187,0,0))

   
    if game.state == "gameover":
        screen.blit(text_game_over, [90, 15])
        screen.blit(text_game_over1, [150, 60])
    # Draw the info box with level and score
    draw_info_box(screen, font2, game.level, game.score,game.destroyed_lines)
    
    pygame.display.flip()
    clock.tick(fps)

pygame.quit()
